import React, { useState, useEffect } from 'react';
    import { StyleSheet, Button, PermissionsAndroid, Alert } from 'react-native';
import { BarCodeScanner } from 'expo-barcode-scanner';
import * as FileSystem from 'expo-file-system';

import { Text, View } from '../components/Themed';
import { RootTabScreenProps } from '../types';
import db, { openDatabase } from '../database/db'
import querys from '../database/querys';

import { selectAllProduts, createTable } from '../database/sql_runner';
import read_file from '../system/read_file';


export default function ScannerScreen({ navigation }: RootTabScreenProps<'Scanner'>) {
  const GRANTED = PermissionsAndroid.RESULTS.GRANTED
  const [text] = useState('Nada escaneado ainda')

  const [hasPermissionCamera, setHasPermissionCamera] = useState(null);
  const [scanned, setScanned] = useState(false);

  // useEffect(() => {
  //   (
  //     async () => {
  //       const { status } = await BarCodeScanner.requestPermissionsAsync();
  //       // @ts-ignore
  //       setHasPermissionCamera(status === PermissionsAndroid.PERMISSIONS.GRANTED);
  //     }
  //   )();
  // }, [])

  useEffect(
    () => {
      openDatabase()
        .then(
          db =>
            db.transaction(
              tx => {
                // read_file()
                // tx.executeSql(querys.SELECT(), [], (tx, results) => console.log(results.rows._array))
              }
            )

        )

      db.transaction(
        tx =>
          // read_file()
          tx.executeSql(querys.SELECT(), [], (tx, results) => {
            const data = results.rows._array as string[]
          })

      )
      // selectAllProduts()
    }, []
  )

  /* const handleBarCodeScanned = ({ type, data }: { type: string, data: string }) => {

    setScanned(true);
    alert(`Código escaneado: ${data}!`);
  };

  const askForCameraPermission = () => {
    (
      async () => {
        const { status } = await BarCodeScanner.requestPermissionsAsync();
        //@ts-ignore
        setHasPermissionCamera(status === 'granted');
      }
    )()
  } */

  const askPermissions = async () => {
    try {
      const grantedCamera = await PermissionsAndroid.requestMultiple(
        [
          "android.permission.READ_CONTACTS",
          PermissionsAndroid.PERMISSIONS.CAMERA,
          "android.permission.ACCESS_FINE_LOCATION",
          "android.permission.RECORD_AUDIO",
        ]
      )

      /* const grantedCamera = await PermissionsAndroid.request(
        // "android.permission.READ_CONTACTS",
        // PermissionsAndroid.PERMISSIONS.CAMERA,
        // "android.permission.ACCESS_FINE_LOCATION",
        // "android.permission.RECORD_AUDIO",
        "android.permission.READ_CONTACTS",
        {
          
          title: 'Permissão para Acesso da Câmera',
          message: 'O acesso à câmera é necessário para utilizar o serviço do leitor de código de barras',
          buttonNeutral: 'Cancelar',
          buttonNegative: 'Não',
          buttonPositive: 'Sim',
        }
      ) */
    } catch (e) {
      console.log("========> Error");
      
    }
    
  }

  const requestForFile = async () => {
    /* const permissions = await FileSystem.StorageAccessFramework.requestDirectoryPermissionsAsync();

    if (permissions.granted) {
      const uri = permissions.directoryUri;
      console.log(uri);
      
    } */
    const result = await FileSystem.StorageAccessFramework.readDirectoryAsync("content://com.android.externalstorage.documents/tree/primary%3AMovies")
    console.log(result)
  }
  
  // if (hasPermissionCamera === null) return <Text>A permissão da câmera não foi concedido</Text>;

  if (!hasPermissionCamera) return (
  // if (hasPermissionCamera === false) return (
    <View style={styles.container}>
      <Text style={{ margin: 10, color: "#222" }}>Sem acesso para a câmera</Text>
      
    <Button title='Solicitar' onPress={() => requestForFile()} />
    {/* <Button title='Solicitar' onPress={() => askPermissions()} /> */}
      {/* <Button color={"#222"} title={'Permitir acesso a câmera'} onPress={() => askForCameraPermission()} /> */}
    </View>
    )



  /* if (hasPermissionCamera === null)
    return (
      <View style={styles.container}>
        <Text>A permissão da câmera não foi concedido</Text>
      </View>)

  if (hasPermissionCamera === false)
    return (
      <View style={styles.container}>
        <Text style={{ margin: 10 }}>Sem acesso para a câmera</Text>
        
      <Button title='Solicitar' onPress={askPermission} />
        <Button color={"#222"} title={'Permitir acesso a câmera'} onPress={() => askForCameraPermission()} />
      </View>) */


  return (
    <View style={styles.container}>
      {/* <Button title='Solicitar' onPress={askPermissions} /> */}
      <Button title='Solicitar' onPress={askPermissions} />
      {/* <View style={styles.barcodebox}>
        <BarCodeScanner
          onBarCodeScanned={handleBarCodeScanned}
          style={{ height: 600, width: 600 }} />
      </View>
      <Text style={styles.maintext}>{text}</Text>

      {scanned && <Button title={'Escanear de novo'} onPress={() => setScanned(false)} color='tomato' />} */}

    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  separator: {
    marginVertical: 30,
    height: 1,
    width: '80%',
  },
  maintext: {
    fontSize: 16,
    margin: 20,
  },
  barcodebox: {
    alignItems: 'center',
    justifyContent: 'center',
    height: 500,
    width: 500,
    overflow: 'hidden',
    borderRadius: 30,
    backgroundColor: 'tomato'
  },
  data: {
    marginTop: 32
  },
  dataPattern: {
    fontSize: 18,
    margin: 3,
  },
  inputPatter: {
    borderWidth: 5,
    borderColor: 'orange',
    borderStyle: 'solid',
    paddingStart: 12
  }
});
